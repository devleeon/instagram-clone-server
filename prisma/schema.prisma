generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(uuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt  
  email         String?   @unique
  username      String   @unique
  password      String
  firstname     String   @default("")
  lastname      String?  @default("")
  phoneNo   String?  @default("") @unique
  bio           String?  @default("")
  followedBy    User[]   @relation("UserFollows", references: [id])
  following     User[]   @relation("UserFollows", references: [id])
  posts         Post[]
  likes         Like[]
  comments      Comment[]
  chatRooms     Chat[]   
  messages      Message[]
  loginSecret   String   @default("")
}
model Like{
  id            String      @id @default(uuid())
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  post          Post     @relation(fields: [postId], references: [id])
  postId        String
}
model Comment{
  id            String      @id @default(uuid())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime @updatedAt  
  text          String
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  post          Post     @relation(fields: [postId], references: [id])
  postId        String
}
model Post {
  id            String      @id @default(uuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt  
  location      String?     @default("")
  caption       String?     @default("")
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  likes         Like[]
  comments      Comment[]
  photos       Photo[]
}

model Photo{
  id            String      @id @default(uuid())
  url           String
  post          Post     @relation(fields: [postId], references: [id])
  postId        String
}
model Chat{
  id              String      @id @default(uuid())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime @updatedAt  
  messages        Message[]
  participants    User[]   
}
model Message{
  id            String      @id @default(uuid())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt  
  text          String
  chatRoom      Chat     @relation(fields: [chatId], references: [id])
  chatId        String
  from          User     @relation("From", fields: [fromId], references: [id])
  fromId        String
  to            User[]   
}
