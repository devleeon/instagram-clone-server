generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(uuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt  
  email         String?     @unique
  username      String      @unique
  password      String
  firstname     String      @default("")
  lastname      String?     @default("")
  phoneNo       String?     @unique
  bio           String?     @default("")
  avatar        String      @default("")
  followedBy    User[]      @relation("UserFollows", references: [id])
  following     User[]      @relation("UserFollows", references: [id])
  posts         Post[]
  likes         Like[]
  comments      Comment[]
  chatRooms     Chat[]   
  messages      Message[]
  loginSecret   String      @default("")
  notification  Notification[]
  saved         Save[]      
  tagged        Tagged[]    
}
model Like{
  id            String      @id @default(uuid())
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  post          Post        @relation(fields: [postId], references: [id])
  postId        String
  notification  Notification?
}
model Tagged{
  id            String      @id @default(uuid())
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  photo         Photo       @relation(fields: [photoId], references: [id])
  photoId       String
}
model Save{
  id            String      @id @default(uuid())
  createdAt     DateTime    @default(now())
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  post          Post        @relation(fields: [postId], references: [id])
  postId        String
}
model Comment{
  id            String      @id @default(uuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt  
  text          String
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  post          Post        @relation(fields: [postId], references: [id])
  postId        String
  notification  Notification?
}
model Post {
  id            String      @id @default(uuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt  
  location      String?     @default("")
  caption       String?     @default("")
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  likes         Like[]
  comments      Comment[]
  photos        Photo[]
  saved         Save[]
}

model Photo{
  id            String      @id @default(uuid())
  url           String
  post          Post        @relation(fields: [postId], references: [id])
  postId        String
  tagged        Tagged[]    
}
model Chat{
  id            String      @id @default(uuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  messages      Message[]
  participants  User[]   
}
model Message{
  id            String      @id @default(uuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt  
  text          String
  chatRoom      Chat        @relation(fields: [chatId], references: [id])
  chatId        String
  from          User        @relation(fields: [fromId], references: [id])
  fromId        String
}
model Notification{
  id            String      @id @default(uuid())
  user          User        @relation(fields: [userId], references: [id])
  userId        String      
  createdAt     DateTime    @default(now())
  newComment    Comment?    @relation(fields: [commentId], references: [id])
  commentId     String?
  newLike       Like?       @relation(fields: [likeId], references: [id])
  likeId        String?
}